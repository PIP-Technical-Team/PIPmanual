{
  "hash": "06751cfa44b13850bad1ea4e8d3a2920",
  "result": {
    "markdown": "# Poverty Calculator Pipeline (pre-computed estimations) {#pcpipeline}\n\nThe Poverty Calculator Pipeline--hereafter, and only for the rest of this chapter, pipeline--is the technical procedure to calculate the pre-computed (or statitic) estimations of the PIP project. These estimations have two main purposes:\n\n1.  To provide the user with instantaneous information about distributive measures of all the household surveys in the PIP repository that do not depend on the value of the poverty line (e.g. mean income, quantiles). Avoiding thus the need for re-computation as it was the case in PovcalNet for some of these measures.\n2.  To provide the necessary inputs to the PIP API.\n\nThis chapter walks you through the folder structure of the folder, the main R script, `_targets.R`, and the complete and partial execution of the script. Also, it provides some tips for debugging.\n\n## Folder structure\n\nThe pipeline is hosted in the Github repository [PIP-Technical-Team/pip_ingestion_pipeline](https://github.com/PIP-Technical-Team/pip_ingestion_pipeline). At the root of the repo you will find a series of files and folders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> +-- batch\n#> +-- pip_ingestion_pipeline.Rproj\n#> +-- R\n#> +-- README.md\n#> +-- renv\n#> +-- renv.lock\n#> +-- run.R\n#> +-- _packages.R\n#> \\-- _targets\n#> \\-- _targets.R\n```\n:::\n\n\n### Folders {.unnumbered}\n\n-   `R` contains long R functions used during the pipeline\n\n-   `batch` is a script for timing the execution of the pipeline. This folder should probably be removed\n\n-   `_targets` is a folder for all objects created during the pipeline. You don't need to look inside as its content is managed by the `targets` package.\n\n-   `renv` is a folder for reproducible environment.\n\n### Files {.unnumbered}\n\n-   `_packages.R` is created by `targets::tar_renv()`. Do not modify manually.\n\n-   `_targets.R` contains the pipeline. This is the most important file.\n\n## Prerequisites\n\nBefore you start working on the pipeline, you need to make sure to have the following PIP packages.\n\n> **Note 1**: notice that instructions below contain suffixes like `@development`. These specify the branch of the particular package that you need to use. Ideally, all packages should use the master branch; however, that will only be possible until the end of the development process.\n\n> **Note 2**: if you update any of the packages developed by the PIP team, make sure you always increased the version of the package using the function `usethis::use_version()`. Even if the change in the package is small, you need on increased the version of the package. Otherwise, `{targets}` won't execute the sections of the pipeline that run the functions you changed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"PIP-Technical-Team/pipdm@development\")\nremotes::install_github(\"PIP-Technical-Team/pipload@development\")\nremotes::install_github(\"PIP-Technical-Team/wbpip@halfmedian_spl\")\ninstall.packages(\"joyn\")\n```\n:::\n\n\nIn case `renv` is not working for you, you may need to install all the packages mentioned in the `_packages.R` script at the root of the folder. Also, make sure to install the most recent version of `targets` and `tarchetypes` packages.\n\n## Structure of the `_targets.R` file\n\nEven thought the pipeline script looks like a regular R script, it is structured in a specific way in order to make it work with the [`{targets}`](https://books.ropensci.org/targets/) package. In fact, notice that it must be called `_targets.R` at the root of the project. It is highly recommended that you read the entire [targets manual](https://books.ropensci.org/targets/) to fully understand how it works. We will often be referring to such manual in order to expand on any particular targets' concept.\n\n### Start up {.unnumbered}\n\nThe first part of the pipeline sets up the environment. The process involve,\n\n1.  loading the `{targets}` and `{tarchetypes}` packages;\n\n<!-- -->\n\n2.  creating default values like directories, time stamps, survey and reference years boundaries, compression level of .fst files, etc.;\n3.  executing `tar_option_set()` to set up an option in `{targets}`. `packages` and `imports` are two particularly important options to track changes in package dependencies. You can read more about it in the sections [Loading and configuring R packages](https://books.ropensci.org/targets/practices.html#loading-and-configuring-r-packages) and [Packages-based invalidation](https://books.ropensci.org/targets/practices.html#packages-based-invalidation) of the targets manual;\n4.  attaching all the packages and functions of the project by running `source('_packages.R')` and `source('R/_common.R')`.\n\n### Step 1: small functions {.unnumbered}\n\nAccording to the section [Functions in pipelines](https://books.ropensci.org/targets/functions.html#functions-in-pipelines) of the targets manual, it is recommend to only use functions rather than expressions during the executions. Presumably, the reason for this is that targets track changes in functions but not in expressions. Thus, this scripts section defines small functions that are executed along the pipeline. In the section above, the scripts `source('R/_common.R')` loads longer functions. Yet, keep in mind that the `'R/_common.R'` was used in a previous version of the pipeline before `{targets}` was implemented. Now, most of the function in `'R/_common.R'` are included in the `{pipdm}` package.\n\n### Step 2: preparing the data {.unnumbered}\n\n[This section used to be longer in previous versions of the pipeline because it used to identify the auxiliary data, load the PIP microdata inventory, and create the cache files. It now only identifies the auxiliary data.]{style=\"color:red\"}\n\n### Step 3: The actual pipeline {.unnumbered}\n\nAlthough better explained in the next section, the overall order of the pipeline is as follows:\n\n1.  Load all necessary data (that is, auxiliary data and inventories), and then create any cache fie that has not been created yet.\n\n2.  Calculate means in LCU\n\n3.  Crate deflated survey mean (DSM) table\n\n4.  Calculate reference year table (aka., interpolated means table)\n\n5.  Calculate distributional stats\n\n6.  Create output tables\n\n    1.  join survey mean table with dist table\n\n    2.  join reference year table with dist table\n\n    3.  coverage table aggregate population at the regional level table\n\n7.  Clean and save.\n\n## Understanding the pipeline\n\nWe must understand not only how the `{targets}` package works, but also how the targets of the Poverty Calculator Pipeline are created. For the former, you can read the targets manual. For the latter, we should start by making a distinction between the different types of targets.\n\nIn `{targets}` terminology, there are two kinds of targets, **stems** and **branches**. **Stems** are unitary targets. That is, for each target there is only one single R object. **Branches**, on the other hand, are targets that contain several objects or *subtargets* inside (you can learn more about them in the chapter [Dynamic branching](https://books.ropensci.org/targets/dynamic.html#dynamic) of the targets manual). We will see the use of this type of targets when we talk about the use of cache files.\n\n### Stem targets {.unnumbered}\n\nThere are two ways to create **stem** targets: either using `tar_target()` or using `tar_map()` from the `{tarchetypes}` package. The `tar_map()` function allows to create **stem** targets iteratively. See for instance the creation of targets for each auxiliary data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_map(\n  values = aux_tb, \n  names  = \"auxname\", \n  \n  # create dynamic name\n  tar_target(\n    aux_dir,\n    auxfiles, \n    format = \"file\"\n  ), \n  tar_target(\n    aux,\n    pipload::pip_load_aux(file_to_load = aux_dir,\n                          apply_label = FALSE)\n  )\n  \n)\n```\n:::\n\n\n`tar_map()` takes the values in the data frame `aux_tb` created in [Step 2: preparing the data] and creates two type of targets. First, it creates the target `aux_dir` that contains the paths of the auxiliary files, which are available in the column `auxfiles` of `aux_tb`. This is done by creating an internal target within `tar_map()` and using the argument `format = \"file\"`. This process lets `{targets}` know that we will have objects that are loaded from a file and are not created inside the pc pipeline.\n\nThen, `tar_map()` uses the the column `auxname` of `aux_tb` to name the targets that contain the auxiliary files. Each target will be prefixed by the word \"aux\". This is why we had to add the argument `file_to_load` to `pipload::pip_load_aux`, so we can let `{targets}` know that the file paths defined in target `aux_dir` are used to create the targets prefixed with \"aux\", which are the actual targets. For example, if I need to use the population data frame inside the pc pipeline, I'd use the target `aux_pop`, which had a corresponding file path in `aux_dir`. This way, if the original file referenced in `aux_dir` changes, all the targets that depend on `aux_pop` will be run again.\n\n### Branches targets {.unnumbered}\n\n[Let's think of a branch target like...]{style=\"color:red\"}\n\nAs explained above, branch targets are targets made of many \"subtargets\" that follow a particular pattern. Most of the targets created in the pc pipeline are **branch** targets because we need to execute the same procedure in every cache file. This could have been done internally in a single one, but then we would lose the tracking features of `{targets}`. Additionally, we could have created a **stem** target for every cache file, result, and output file, but that would have been both impossible to visualize and more difficult to code. Hence, branch targets is the best option.\n\nThe following example illustrates how it works,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# step A\ntar_target(\n  cache_inventory_dir, \n  cache_inventory_path(),\n  format = \"file\"\n),\n\n# step B\ntar_target(\n  cache_inventory, \n  {\n    x <- fst::read_fst(cache_inventory_dir, \n                       as.data.table = TRUE)\n  },\n),\n\n# step C\ntar_target(cache_files,\n           get_cache_files(cache_inventory)),\n\n# step D\ntar_files(cache_dir, cache_files),\n\n# step E\ntar_target(cache, \n           fst::read_fst(path = cache_dir, \n                         as.data.table = TRUE), \n           pattern = map(cache_dir), \n           iteration = \"list\")\n```\n:::\n\n\nThe code above illustrates several things. It is divided in steps, with the last step (step E) being the part of the code where the **branch** target is created. Yet, it is important to understand all the previous steps.\n\nIn step A we create target `cache_inventory_dir`, which is merely the file path that contains the cache inventory. Notice that it is returned by a function and not entered directly into the target. Since it is a file path, we need to add the argument `format = \"file\"` to let `{targets}` know that it is input data. In step B we load the cache inventory file into target `cache_inventory` by providing the target \"path\" that we created in step A. This file has several columns. One of them contains the file path of every single cache file in the PIP network drive. That single column is extracted from the cache inventory in step C. Then, in step D, each file path is declared as input, using the convenient function `tar_files()`, creating thus a new target, `cache_dir`. Finally, we create **branch** target `cache` with all the cache files by loading each file. To do this iteratively, we parse the `cache_dir` target to the `path` argument of the function `fst::read_fst()` and to the `pattern = map()` argument of the `tar_target()` function. At the very end, we need to specify that the output of the iteration is stored as a list, using the argument `iteration = \"list\"`.\n\nThe basic logic of **branch** targets is that the vector or list to iterate through should be parsed to the function's argument and to the `pattern = map()` argument of the `tar_target()` function. It is very similar to `purrr::map()`\n\n> **Note**: if we are iterating through *more than one* vector or list, you need to (1) separate each of them by commas in the `map()` part of the argument (See example code below). (2) make sure all the vectors or lists **have the same length**. This is why we cannot remove NULL or NA values from any target. (3) make sure you do **NOT** sort any of the output targets as it will loose its correspondence with other targets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of creating branch target using several lists to iterate through.\ntar_target(\n  name      = dl_dist_stats,\n  command   = db_compute_dist_stats(dt       = cache, \n                                    mean     = dl_mean, \n                                    pop      = aux_pop, \n                                    cache_id = cache_ids), \n  pattern   =  map(cache, dl_mean, cache_ids), \n  iteration = \"list\"\n)\n```\n:::\n\n\n### Creating the cache files {.unnumbered}\n\nThe following code illustrates the creation of cache files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_target(pipeline_inventory, {\n  x <- pipdm::db_filter_inventory(\n    dt = pip_inventory,\n    pfw_table = aux_pfw)\n  \n  # Uncomment for specific countries\n  # x <- x[country_code == 'IDN' & surveyid_year == 2015]\n}\n),\ntar_target(status_cache_files_creation, \n           pipdm::create_cache_file(\n             pipeline_inventory = pipeline_inventory,\n             pip_data_dir       = PIP_DATA_DIR,\n             tool               = \"PC\",\n             cache_svy_dir      = CACHE_SVY_DIR,\n             compress           = FST_COMP_LVL,\n             force              = TRUE,\n             verbose            = FALSE,\n             cpi_dt             = aux_cpi,\n             ppp_dt             = aux_ppp)\n)\n```\n:::\n\n\nIt is important to understand this part of the pc pipeline thoroughly because the cache files used to be created in [Step 2: preparing the data] rather than here. Now, it has not only been integrated in the pc pipeline, but it is also possible to execute the creation of cache files independently from the rest of the pipeline, by following the instructions in [Executing the \\_targets.R file].\n\nThe first target, `pipeline_inventory` is just the inner join of the pip inventory dataset and the price framework (pfw) file, to make sure we only include what the **pfw** says. This data set also contains a lot of useful information to create the cache files. Note that the commented line in this target would filter the pipeline inventory to have only the information for IDN, 2015. [If you need to update specific cache files, you must add the proper filtering condition there]{style=\"color:red\"}.\n\nIn the second target, `status_cache_files_creation`, you will create the cache files but notice that the returning value of the function `pipdm::create_cache_file()` is not the cache file per-se, but a list with the status of the creation process. If the creation of a particular file fails, it does not stop the iteration that creates all the cache files. At the end of the process, it returns a list with the creation status of each cache file. Notice that the function `pipdm::create_cache_file()` requires the CPI and the PPP auxiliary data. That is because the variable `welfare_ppp`, which is the welfare aggregate in 2011 PPP values, is added to the cache files. FInally, and more importantly, the argument `force = TRUE` ensures that even if the cache file already exists, it should be modified. This is important when you require additional features in the cache file from the then ones it currently has. If set to `TRUE`, it will replace any file in the network drive that is listed in `pipeline_inventory`. If set to `FALSE`, only the files that are in `pipeline_inventory` -but not in the cache folder- will be created. Use this option only when you need to add new features to all cache data, or when you are testing and only need a few surveys with the new features.\n\n## Understanding `{pipdm}` functions\n\nThe `{pipdm}` package is the backbone of the pc pipeline. It is in charge of executing the functions in `{wbpip}` and consolidate the new DataBases. This is why many of the functions in `{pipdm}` are prefixed with \"db\\_\".\n\n### Internal structure of `{pipdm}` functions\n\nThe main objective of `{pipdm}` is to execute the functions in `{wbpip}` to do the calculations and then build the data frames. As of today (2023-08-24), the process is a little intricate.\n\nLet's take the example of estimating distributive measures in the pipeline. The image [below](#pipdm-structure) shows that there are at least three intermediate function levels between the `db_compute_dist_stats()` function, which is directly executed in the pc pipeline, and the `wbpip::md_compute_dist_stats()`, which makes the calculations. Also, notice that the functions are very general in regards to the output. No higher level function is specific enough to retrieve only one measure, such as the Gini coefficient, or the median, or the quantiles of the distribution. If you need to add or modify one particular distributive measure, you must do it in functions inside `wbpip::md_compute_dist_stats()`, making sure the new output does not mess up the execution of any of the intermediate functions before the results get to `db_compute_dist_stats()`.\n\n![](img/pipdm_structure.png){#pipdm-structure}\n\nThis long chain of functions is inflexible and makes debugging very difficult. So, if you need to make any modification, first identify the chain of execution in each `pipdm` function you modify, and then make sure your changes do not affect the output format as it may break the execution chain. This is also a good example of why this structure needs to be improved.\n\n### Updating `{pipdm}` (or any other PIP package)\n\nAs explained above, if you need to modify any function in `pipdm` or in `wbpip`, you need to make sure that the output does not conflict with the execution chain. Additionally, If you update any of the packages developed by the PIP team, make sure you always increased the version of the package using the function `usethis::use_version()`. Even if the change in the package is small, you need to increase the version of the package. Otherwise, `{targets}` won't execute the sections of the pipeline that run the functions you changed. Finally as explained in the [Prerequisites], if you are working on a branch different than master, make sure you install that version of the package before running the pipeline.\n\n## Executing the `_targets.R` file\n\nThe `.Rprofile` at the root of the directory makes sure that both `{targets}` and `{tarchetypes}` are loaded when the project is started. The whole pipeline execution might be very time consuming because it still needs to load all the data in the network drive. If you use a desktop remote connection the execution might be faster than running it locally, but it is still very time consuming. So, it is advisable to only execute the targets that are directly affected by your changes and manually check that everything looks ok. After that, you can execute the entire code confidently and leave it running overnight.\n\nIn order to execute the whole pipeline, you only need to type the directive `tar_make()` in the console. If you want to execute only one target, then type the name of the target in the same directive, e.g., `tar_make(dl_dist_stats)`. Keep in mind that if the inputs of prior targets to the objective target have changed, those targets will be executed first.\n\n## Debugging\n\nDebugging in targets is not easy. Yet, there are two ways to do it. The first way is provided in the chapter [Debugging](https://books.ropensci.org/targets/debugging.html) of the Targets Manual. It provides clear instruction on how to debug *while still being in the pipeline*, but it could be the case that you don't find this method flexible to dig deep enough into the problem. Alternatively, you could debug by stepping out of the pipeline a little bit and gain more flexibility, as described below.\n\nDebugging is needed in one of two cases: one, because you got an error when running the pipeline with `tar_make()` or, two, because your results are odd. In either case, you should probably have an idea--though not always--of where the problem is. If the problem is an error in the execution of the pipeline, `{targets}` printed messages are usually informative.\n\n### Debugging stem targets {.unnumbered}\n\nLet's see a simple example. Assume the problem is in the target `dt_dist_stats`, which is created by executing the function `db_create_dist_table` of the `{pipdm}` package. Since the problem is in there, all the targets and inputs necessary to create `dt_dist_stats` should be available in the `_targets/` data store. So, you can load them using `tar_load()` and execute the function in debugging mode. Like this,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_load(dl_dist_stats)\ntar_load(svy_mean_ppp_table)\ntar_load(cache_inventory)\n\ndebugonce(pipdm::db_create_dist_table)\npipdm::db_create_dist_table(\n  dl        = dl_dist_stats,\n  dsm_table = svy_mean_ppp_table, \n  crr_inv   = cache_inventory\n  )\n```\n:::\n\n\nNote that you must use the `::` because the environment in which `{targets}` runs is different from your global environment, in which you might not have attached all the libraries.\n\n### Debugging branch targets {.unnumbered}\n\nThe challenge debugging branch targets is that if the problem is in a specific survey, you can't access the \"subtarget\" using the survey ID, or something of that nature, because the name of the subtarget is created by `{targets}` using a random number. This requires a little more of work.\n\nImagine now that the distributive measures of IDN 2015 are wrong. You see the pipeline and notice that these calculations are executed in target `dl_dist_stats`, which is the branch target created over **all the cache files!** It would look like something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_target(\n  name      = dl_dist_stats,\n  command   = db_compute_dist_stats(dt       = cache, \n                                    mean     = dl_mean, \n                                    pop      = aux_pop, \n                                    cache_id = cache_ids), \n  pattern   =  map(cache, dl_mean, cache_ids), \n  iteration = \"list\"\n)\n```\n:::\n\n\nIn order to find the problem in IDN 2015, this what you could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\ndt <- pipload::pip_load_cache(\"IDN\", 2015, \"PC\")\ntar_load(dl_mean)\ntar_load(cache_ids)\ntar_load(aux_pop)\n\n# Extract corresponding mean and cache ID\nidt      <- which(cache_ids == unique(dt$cache_id))\ncache_id <- cache_ids[idt]\nmean_i   <- dl_mean[[idt]]\n\n# Esecute the function of interest\ndebugonce(pipdm:::compute_dist_stats)\nds <- pipdm::db_compute_dist_stats(dt       = dt, \n                                   mean     = mean_i, \n                                   pop      = aux_pop, \n                                   cache_id = cache_id)\n```\n:::\n\n\nFirst, you load all the inputs. Since target `dl_mean` is a relatively light object, we load it directly from the `_targets/` data store. Targets `cache_ids` and `aux_pop` are data frames, not lists, so we also load them from memory. The microdata, however, is problematic because target `cache`, which is the one that is parsed to create the **actual** `dl_dist_stata` target, is a huge list with all the micro, grouped, and imputed data. The solution is then to load the data frame of interest, using either `pipload` or `fst`.\n\nSecondly, we need to filter the list `dl_mean` and the data frame `cache_ids` to parse only the information accepted by the `pipdm::db_compute_dist_stats()` function. This has to be done when debugging because in the actual target this is done iteratively in `pattern   =  map(cache, dl_mean, cache_ids)`.\n\nFinally, you execute the function of interest. Notice something else. The target `aux_pop` is parsed as a single data frame because `pipdm::db_compute_dist_stats()` requires it that way. This is also one of the reasons why these functions in `{pipdm}` need some fixing and consistency in the format of the their inputs.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}