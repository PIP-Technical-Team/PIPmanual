{
  "hash": "be49b5f544355672931221541c054d66",
  "result": {
    "markdown": "# Auxiliary data\n\n\n\n\n\nAs it was said in Section \\@ref(data-acquisition), auxiliary data is the data\nused to temporally deflate and line up welfare data, with the objective of\ngetting poverty estimates comparable over time, across countries, and, more\nimportantly, being able to estimate regional and global estimates. Yet,\nauxiliary data also refers to metadata with functional and qualitative\ninformation. Functional information is such that is used in internal\ncalculations such as time comparability or surveys availability. Qualitative\ninformation is just useful information that does not affect, neither depend on,\nquantitative data. It is primary collected and made available for the end user.\n\nAs explain in Chapter \\@ref(folder-structure), all auxiliary data is stored in\n`\"y:/PIP-Data/_aux/\"`.\n\n\n::: {.cell}\n\n:::\n\n\nThe naming convention of subfolders inside the \\_aux directory is useful because\nauxiliary data is commonly referred to in all technical processes by its\nconvention rather than by it actual name. For instance Gross Domestic Product or\nPurchasing Power Parity are better known as gdp and ppp, respectively. Yet,\nother measures such as national population or consumption also make use of\nconventions.\n\nIn this chapter you will learn everything related to each of the files that\nstore auxiliary data. Notice that the chapter is structured by files rather than\nby measures or types of auxiliary data because you may find more than one\nmeasure in one file.\n\nThe R package that manages auxiliary data is `{pipaux}`.\n\nAs explained in Chapter \\@ref(folder-structure), within the folder of each\nauxiliary file, you will find, at a minimum, a `_vintage` folder, one `xxx.fst`,\none `xxx.dta` file, and one `xxx_datasignature.txt` , where `xxx` stands for the\nname of the file.\n\n## Population\n\n### Original data\n\nEverything related to population data should be placed in the folder\n`y:\\PIP-Data\\_aux\\pop\\`. hereafter (`./`).\n\nThe population data come from one of two different sources. WDI or an internal\nfile provided by a member of the DECDG team. Ideally, population data should be\ndownloaded from WDI, but sometimes the most recent data available has not been\nuploaded yet, so it needs to be collected internally in DECDG. As of now\n(August 24, 2023), the DECDG focal point to provide the\npopulation data is [Emi Suzuki](mailto:esuzuki1@worldbank.org). You just need to\nsend her an email, and she will provide the data to you.\n\nIf the data is provided by DECDG, it should be stored in the folder\n`./raw_data`. The original excel file must be placed without modification in the\nfolder `./raw_data/original`. Then, the file is copied again one level up into\nthe folder `./raw_data` with the name `population_country_yyyy-mm-dd.xlsx` where\n`yyyy-mm-dd` refers to the official release date of the population data. Notice\nthat for countries PSE, KWT and SXM, some years of population data are missing\nin the DECDG main file and hence in WDI. Here we complement the main file with\nan additional file shared by Emi to assure complete coverage. This file contains\nhistorical data and will not need to be updated every year. This additional file\nhas the name convention `population_missing_yyyy-mm-dd.xlsx` and should follow\nthe same process as the `population_country` file. Once all the files and their\ncorresponding place, you can update the `./pop.fst` file by typing\n`pipaux::pip_pop_update(src = \"decdg\")`.\n\nIf the data comes directly from WDI, you just need to update the file\n`./pop.fst` by typing `pipaux::pip_pop_update(src = \"wdi\")`. It is worth\nmentioning that the population codes used in WDI are \"SP.POP.TOTL\",\n\"SP.RUR.TOTL\", and \"SP.URB.TOTL\", which are total population, rural population,\nand urban population, respectively. If it is the case that PIP begins using\nsubnational population, a new set of WDI codes should be added to the R script\nin\n[pipaux::pip_pop_update()](https://github.com/PIP-Technical-Team/pipaux/blob/cd7738f98ec5373db8333c3573700b4991776c8d/R/pip_pop_update.R#L17).\n\n### Data structure\n\nPopulation data is loaded by typing either `pipload::pip_load_aux(\"pop\")` or\n`pipaux::pip_pop(\"load\")`. We highly recommend the former, as `{pipload}` is the\nintended R package for loading any PIP data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pop <- pipload::pip_load_aux(\"pop\")\n# head(pop)\n```\n:::\n\n\n## National Accounts\n\nNational accounts account for the economic development of a country at an\naggregate or macroeconomic level. These measure are thus useful to interpolate\nor extrapolate microeconomic measures mean welfare aggregate or poverty\nheadcount when household surveys are not available. National accounts work as a\nproxy of the economic development that would have been present if household\nsurveys were available.\n\nThere are two main types of national accounts, Household Final Consumption\nExpenditure (HFCE) and Gross Domestic Product (GDP)---both in real per capita\nterms. Please refer to [Section\n5.3](https://povcalnet-team.github.io/Methodology/lineupestimates.html#nationalaccounts)\nof [@worldbankPovertyInequalityPlatform2021] to understand the usage of national\naccounts data.\n\n### GDP\n\nAs explained in [Section\n5.3](https://povcalnet-team.github.io/Methodology/lineupestimates.html#nationalaccounts)\nof [@worldbankPovertyInequalityPlatform2021], there are three sources of GDP\ndata, and one more for a few particular cases. The integration of all the\nsources of GDP data is performed by `pipaux::pip_gdp_update()`, you'll need to\nmanually download and store the data from WEO and the data for the special\ncases. The national accounts series from WDI are GDP per capita Â [series code:\n**NY.GDP.PCAP.KD**]. These series are in constant 2010 US\\$.\n\nThe most recent version of the WEO data most be downloaded from the [World\nEconomic Outlook\nDatabases](https://www.imf.org/en/Publications/SPROLLS/world-economic-outlook-databases)\nof the IMF.org website and saved as an .xls file in `<maindir>/_aux/weo/`. The\nfilename should be in the following structure `WEO_<YYYY-DD-MM>.xls`. Due to\npotential file corruption the file must be opened and re-saved before it can be\nupdated with `pip_gdp_weo()`, which is an internal function fo\n`pipaux::pip_gdp_update()`. Hopefully in the future IMF will stop using an\n\\`.xls\\` file that's not really xls.\n\n### Consumption (PCE)\n\nPrivate Consumption Expenditure (pce) is gathered from WDI, with the exception\nof a few special cases. As in the case of GDP, the special cases are treated in\nthe same way with PCE. You only need to execute the function\n`pipaux::pip_pce_update()` to update the PCE data. HFCE per capita [series code:\n**NE.CON.PRVT.PC.KD**] [@prydzNationalAccountsData2019]. These series are in\nconstant 2010 US\\$.\n\n### National Accounts, Special Cases\n\nSpecial national accounts are used for lining up poverty estimates in the\nfollowing cases[^auxiliary_data-1]:\n\n[^auxiliary_data-1]: The examples of special cases mentioned in this document\n    are based on the March 2021 PovcalNet update.\n\n1.  National accounts data are *unavailable* in the latest version of WDI.\n\n    In such cases, national accounts data are obtained, in order of preference,\n    from the latest version of WEO, or the latest version of MPD. For example,\n    the entire series of GDP per capita for Taiwan, China and Somalia are\n    missing in WDI, so WEO series are used instead.\n\n2.  National accounts data are *incomplete* in the latest version of WDI.\n\n    These are the cases where national accounts data are not available in WDI\n    for some historical or recent years. In such cases, national accounts data\n    in WDI are chained on backward or forward using growth rates from WEO or\n    MPD, in that order. For example, GDP per capita for South Sudan (2016-2019)\n    are based on the growth rate of GDP per capita from WEO. GDP per capita data\n    for Liberia up to 1999 are based on the growth rate in GDP per capita from\n    MPD.\n\n3.  The available national accounts data from official sources (e.g. WDI, WEO,\n    MPD) are considered to have quality issues.\n\n    This is the case for Syria. Supplementary national accounts data are\n    obtained from other sources, including research papers or national\n    statistical offices. GDP per capita series for Syria (for 2010 through 2019)\n    are from research\n    [papers---\\@kostialSyriaConflictEconomy2016Gobat](mailto:papers---@kostialSyriaConflictEconomy2016Gobat){.email}\n    (for 2011-2015) and @devadasGrowthWarSyria2019 (for 2016-2019)---and are\n    chained on backward with growth rates in GDP per capita from WEO. See\n    \\*y:/PIP-Data/\\_aux/sna/\\* for more details on how this is implemented.\n\n4.  National accounts data need to be adjusted for the purposes of global\n    poverty monitoring.\n\n    This is the case for India. Growth rates in national accounts data for rural\n    and urban India after 2014, precisely HFCE (or formerly PCE) per capita from\n    WDI, are adjusted with a pass-through rate of 67%, as described in Section 5\n    of @castanedaaguilarSeptember2020PovcalNet2020. See\n    \\*y:/PIP-Data/\\_aux/sna/NAS special_2021-01-14.csv\\* for more details on how\n    this is implemented.\n\n## CPI\n\n### Raw data\n\nGeneral documents on the CPI source and the CPI frameworks are posted here. Yet,\nfor more details, please refer to [@laknerConsumerPriceIndices2018b;\n@azevedoPricesUsedGlobal2018a].\n\nThere are three sources of CPI: IFS, WEO, and country team.\n\nIn general, the CPI data will be taken from the IMF International Financial\nStatistics (IFS). For the incoming update, about 2-3 months to the upload we\ninitial the request to DECDG CPI team for the three series: annually, quarterly,\nmonthly from IFS CPI database. The purpose of requesting DECDG CPI team is to\nensure the same vintage will be updated in WDI later in the next update cycle.\nWe would need the three series as for some countries we only have annually, and\nfor other countries we could have up to monthly. This is also a check for us in\nchecking the consistency of annual and monthly series. The monthly series will\nbe used to construct annual and quarterly series, as that there are some\ninconsistences between the annual and monthly series in the IFS. For the\nexceptional countries, Poverty GP replaces data series based on previous\nconsultations when there is no update or better information.\n\nSome countries also use National series which are not available from IFS -- in\nthis case we check with country poverty TTLs to provide the updated information,\nespecially when we have a new survey for that country.\n\nIn some cases where the CPI value are missing for some sources but not other\nsources. This is especially true for the very old year where the data is\navailable for one source, or very recent year where WEO has a projection on the\nCPI while it is not available in IFS. In those cases, we will follow the logic\nand method described in the \"CPI source document\" to ensure we have all CPI\nvalues for all data points.\n\nGlobal D4G team will prepare and send the CPI raw series as well as the weighted\nnumbers for the current data points in the system. The data will be query by\ndatalibweb. The following files will be added to the system each round:\n\n| File ane                     | Description                                                 |\n|------------------------------|-------------------------------------------------------------|\n| Final_CPI_PPP_to_be_used.dta | final weighted CPI for poverty calculation                  |\n| Yearly_CPI_Final.dta         | annual CPI -- combined from different sources using chained |\n| methods Yearly_CPI.dta       | annual CPI constructed from the monthly CPI                 |\n| Yearly_CPI_Annual.dta        | annual CPI from the annual series                           |\n| Quarterly_CPI.dta            | quarterly CPI                                               |\n| Monthly_CPI.dta              | monthly CPI series                                          |\n| WEO_Yearly_CPI.dta           | annual CPI from WEO                                         |\n| Special_CPI_series.dta       | Special case of CPI (national source, imputation)           |\n\n### Vintage control\n\n\n\n\n\nVintage control of the CPI data comes in a similar fashion as welfare data,\n`CPI_vXX_M_vXX_A`, where `vXX_M` refers to the version of the master or raw\ndata, and `vXX_A` refers to the alternative version.\n\nEvery year, around November-December, PIP CPI data is updated with the most\nrecent version of the IMF CPI data, which comes with information for the most\nrecent year available and with changes/fixes/additions of previous years for\neach country. When this happens, the master version of the CPI ID is increased\nin one unit before the data is saved. As of today, the current ID is .\nIf data is modified during the rolling of the year, then the alternative version\nof the CPI ID is increased in one unit.\n\n### Data structure\n\nWhen you load CPI data using `#pipload::pip_load_aux(\"cpi\")`, the data you get\nhas already been cleaned for being use in the PIP workflow, and it is slightly\ndifferent from the original CPI data stored in datalibweb servers. That is, the\nway CPI data is used and referred to datalibweb is different from the way it is\nused in PIP even though they both achive the same purpose.\n\nThe most important variable in CPI data is, no surprisingly, `cpi`. This\nvariable however, is not available in the original CPI data from dlw. The\noriginal name of this variable comes in the form `cpiYYYY`, where `YYYY` refers\nto the base year of the CPI, which in turn depends on the collection year of the\nPPP. Today, this variable is thus \".\" The name of\nthis variable is stored in the `pipaux.cpivar` object in the `zzz.R` file of the\n`{pipaux}` package. This will supdate the option `getOption(\"pipaux.cpivar\")`,\nguaranteing that `pipaux::pip_cpi_update()` uses the right variable when\nupdating the CPI data.\n\nAnother important variable in CPI dataframe is `change_cpiYYYY`, where `YYYY`\nstands for the base year of the CPI. Since it version control of the CPI data\ndoes not depend on the individual changes in the CPI series of each country but\non the release of new data by the IMF or by additional modifications by the\nPoverty GP, variable `change_cpiYYYY` tracks changes in the CPI at the\ncountry/year/survey with respect to the previous version. This is very useful\nwhen you need to identify changes in output measures like poverty rates that\ndepend on deflation. One possible source of difference is the CPI and this\nvariable will help you identify whether the number of interest has change\nbecause the CPI has changed.\n\n## PPP\n\n### Raw data\n\nThe PPP data is downloaded from ICP website for most of the countries (Ask ICP\nteam for the link, outlier, countries with changes in currency). Often there is\na GPWG working group to assess the PPP and its impacts on poverty. In this case,\nthe team would determine the countries for which there is a need to impute the\nPPP value, either from the ICP model or the team model.\n\nAfter the validation and adjustment process, the PPP values are stored in the\ndata file for all PPP rounds with vintage controls for each round.\n\nThe name of the variables in the wide-format file will follow the structure\n**ppp_YYYY_vX_vY**. Where, *YYYY* refers to the ICP round. *vX* refers to the\nversion of the release, and *vY* refers to the adaptation of the release. So, v1\nwill be the original data, whereas v2 would be the first adaptation or estimates\nof the release.\n\n-   YYYY: refers to the ICP round.\n\n-   vX: refers to the version of the release.\n\n-   vY: refers to the adaptation of the release. So, v1 will be the original\n    data, whereas v2 would be the first adaptation or estimates of the release.\n\n\n\n\n\n### Data structure\n\nPPP data is available by typing, `pipload::pip_load_aux(\"ppp\")`. As expected,\nthe data you get has already been cleaned for being use in the PIP workflow, and\nit is slightly different from the original PPP data stored in datalibweb\nservers. The most important difference between the PIP data frame and the\ndatalibweb data frame is its rectangular structure. PIP data is in long format,\nwhereas datalibweb data in wide format.\n\nThe reason for having PPP data in long format in PIP is that some countries,\nvery few, use a different PPP year than the rest of the countries. Instead of\nusing a different variable for the calculations of those specific countries, we\nuse the same variable for all the countries but filter the corresponding\nobservations for each country using metadata from the Price Framework database.\n\nThe PPP data is at the country/ppp year/data_level/release version/adapation\nversion level. Yet, several filters most always be applied before this data can\nbe used. Ultimately, the data frame should be at the country/data_level level to\nused properly. As a general rule, the filter must be done by selecting the most\nrecent `release_version` and the most recent `adaptation_version` in each year.\nThen you can just filter by the PPP year you want to work with. In order to make\nthis process even easier we have created variables `ppp_default` and\n`ppp_default_by_year`, which dummy variables to filter data. If you keep all\nobservations that `ppp_default == 1` you will get the current PPP used for all\nPIP calculations. If you use `ppp_default_by_year == 1`, you get the default\nversion used in each PPP year. This is useful in case you want to make\ncomparisons between PPP releases. This two variables are created in function\n`pipaux::pip_ppp_clean()` , in particular in [these\nlines](https://github.com/PIP-Technical-Team/pipaux/blob/cd7738f98ec5373db8333c3573700b4991776c8d/R/pip_ppp_clean.R#L44-L66).\n\n## Price FrameWork (PFW)\n\nblah\n\n### Original data\n\nasds\n\n## Abbreviations\n\n**HFCE** -- final consumption expenditure\n\n**MDP** -- Maddison Project Database\n\n**PCE** -- private consumption expenditure\n\n**WDI** -- World Development Indicators\n\n**WEO** -- World Economic Outlook\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}