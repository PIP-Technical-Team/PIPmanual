[["index.html", "PIP Manual Prerequisites", " PIP Manual DECIS Poverty GP 2021-05-07 Prerequisites You need to make sure the bookdown package is installed in your computer install.packages(&quot;bookdown&quot;) # or the development version devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction PIP workflow is  "],["load.html", "Chapter 2 Load microdata and Auxiliary data 2.1 Auxiilary data 2.2 Microdata", " Chapter 2 Load microdata and Auxiliary data Make sure you have all the packages installed and loaded into memory. Given that they are hosted in Github, the code below makes sure that any package in the PIP workflow can be installed correctly. ## First specify the packages of interest packages = c(&quot;pipaux&quot;, &quot;pipload&quot;) ## Now load or install&amp;load all package.check &lt;- lapply( packages, FUN = function(x) { if (!require(x, character.only = TRUE)) { pck_name &lt;- paste0(&quot;PIP-Technical-Team/&quot;, x) devtools::install_github(pck_name) library(x, character.only = TRUE) } } ) 2.1 Auxiilary data Even though pipaux has more than 25 functions, most of its features can be executed by using only the pipaux::load_aux and pipaux::update_aux functions. 2.1.1 udpate data the main function of the pipaux package is udpate_aux. The first argument of this function is measure and it refers to the measure data to be loaded. The measures available are cpi, gdm, gdp, pce, pfw, pop, and ppp. pipaux::update_aux(measure = &quot;cpi&quot;) #&gt; no labels available for measure `country_list` #&gt; v CPI data is up to date 2.1.2 Load data Loading auxiliary data is the job of the package pipload through the function pipload::pip_load_aux(), though pipaux also provides pipaux::load_aux() for the same purpose. Notice that, though both function do exactly the same, the loading function from pipload has the prefix pip_ to distinguish it from the one in pipaux. However, we are going to limit the work of pipaux to update auxiliary data and the work of pipload to load data. Thus, all the examples below use pipload for loading either microdata or auxiliary data. df &lt;- pipload::pip_load_aux(measure = &quot;cpi&quot;) #&gt; v Most recent version of data loaded #&gt; //w1wbgencifs01/pip/PIP-Data_QA/_aux/cpi/cpi.fst head(df) #&gt; country_code cpi_year survey_year cpi ccf survey_acronym change_cpi2011 #&gt; 1: AGO 2000 2000.21 0.03385145 1 HBS 0 #&gt; 2: AGO 2008 2008.50 0.72328920 1 IBEP-MICS 1 #&gt; 3: AGO 2018 2018.17 2.93543023 1 IDREA 1 #&gt; 4: ALB 1996 1996.00 0.44446184 1 EWS 1 #&gt; 5: ALB 2002 2002.00 0.78033877 1 LSMS 1 #&gt; 6: ALB 2005 2005.00 0.83852839 1 LSMS 1 #&gt; cpi2011 cpi_domain cpi_domain_value cpi2011_unadj cpi2011_AM20 cpi2011_unadj_AM20 #&gt; 1: 0.03385145 1 1 0.03385145 0.033848061 0.033848061 #&gt; 2: 0.72328920 1 1 0.72328920 0.723337197 0.723337197 #&gt; 3: 2.93543023 1 1 2.93543023 3.060594983 3.060594983 #&gt; 4: 0.44446184 1 1 0.44446184 0.444432734 0.444432734 #&gt; 5: 0.78033877 1 1 0.78033877 0.780287716 0.780287716 #&gt; 6: 0.83852839 1 1 0.83852839 0.838473458 0.838473458 #&gt; cpi2005_AM20 cpi_final_2019 cpi_data_level cpi_id #&gt; 1: 0.071889997 NA national CPI_v05_M_v01_A #&gt; 2: 1.528669953 NA national CPI_v05_M_v01_A #&gt; 3: NA NA national CPI_v05_M_v01_A #&gt; 4: 0.530049980 NA national CPI_v05_M_v01_A #&gt; 5: 0.950504005 NA national CPI_v05_M_v01_A #&gt; 6: 1.000000000 NA national CPI_v05_M_v01_A 2.2 Microdata Loading PIP microdata is the most practical action in the pipload package. However, it is important to understand the logic of microdata. PIP microdata has several characteristics, There could be more than once survey for each Country/Year. This happens when there are more than one welfare variable available such as income and consumption. Some countries, like Mexico, have the two different welfare types in the same survey for the same country/year. This add a layer of complexity when the objective is to known which is default one. There are multiple version of the same harmonized survey. These version are organized in a two-type vintage control. It is possible to have a new version of the data because the Raw datathe one provided by the official NSOhas been updated, or because there has been un update in the harmonization process. Each survey could be use for more than one analytic tool in PIP (e.g., Poverty Calculator, Table Maker, or SOL). Thus, the data to be loaded depends on the tool in which it is going to be used. Thus, in order to make the process of finding and loading data efficiently, pipload is a three-step process. 2.2.1 Inventory file The inventory file resides in y:/PIP-Data/_inventory/inventory.fst. This file is a data frame with all the microdata available in the PIP structure. It has two main variables, orig and filename. The former refers to the full directory path of the database, whereas the latter is only the file name. the other variables in this data frame are derived from these two. The inventory file is used to speed up the file searching process in pipload. In previous packages, each time the user wanted to find a particular data base, it was necessary to look into the folder structure and extract the name of all the file that meet a particular criteria. This is time-consuming and inefficient. The advantage of this method though, is that, by construction, it finds all the the data available. By contrast, the inventory file method is much faster than the searching method, as it only requires to load a light file with all the data available, filter the data, and return the required information. The drawback, however, is that it needs to be kept up to date as data changes constantly. To update the inventory file, you need to use the function pip_update_inventory. If you dont provide any argument, it will update the whole inventory, which may take around 10 to 15 minthe function will warn you about it. By provide the country/ies you want to update, the process is way faster. # update one country pip_update_inventory(&quot;MEX&quot;) #&gt; i file inventory.fst is up to date. #&gt; No update performed # Load inventory file df &lt;- pip_load_inventory() head(df[, &quot;filename&quot;]) #&gt; filename #&gt; 1: AGO_2000_HBS_V01_M_V01_A_PIP_PC-GPWG.dta #&gt; 2: AGO_2008_IBEP-MICS_V02_M_V02_A_PIP_PC-GPWG.dta #&gt; 3: AGO_2008_IBEP-MICS_V02_M_V02_A_PIP_TB-ALL.dta #&gt; 4: AGO_2018_IDREA_V01_M_V01_A_PIP_PC-GPWG.dta #&gt; 5: AGO_2018_IDREA_V01_M_V01_A_PIP_TB-ALL.dta #&gt; 6: ALB_1996_EWS_V01_M_V01_A_PIP_PC-HIST.dta 2.2.2 Finding data Every dataset in the PIP microdata repository is identified by seven variables! Country code, survey year, survey acronym, master version, alternative version, tool, and source. So giving the user the responsibility to know all the different combinations of each file is a heavy burden. Thus, the data finder, pip_find_data(), will provide the names of all the files available that meet the criteria in the arguments provided by the user. For instance, if the use wants to know the all the file available for Paraguay, we could type, pip_find_data(country = &quot;PRY&quot;)[[&quot;filename&quot;]] #&gt; [1] &quot;PRY_1990_EH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; &quot;PRY_1995_EH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; #&gt; [3] &quot;PRY_1997_EIH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; &quot;PRY_1999_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [5] &quot;PRY_2001_EIH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2001_EIH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [7] &quot;PRY_2002_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2002_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [9] &quot;PRY_2003_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2003_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [11] &quot;PRY_2004_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2004_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [13] &quot;PRY_2005_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2005_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [15] &quot;PRY_2006_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2006_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [17] &quot;PRY_2007_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2007_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [19] &quot;PRY_2008_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2008_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [21] &quot;PRY_2009_EPH_V01_M_V06_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2009_EPH_V01_M_V06_A_PIP_TB-ALL.dta&quot; #&gt; [23] &quot;PRY_2010_EPH_V01_M_V06_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2010_EPH_V01_M_V06_A_PIP_TB-ALL.dta&quot; #&gt; [25] &quot;PRY_2011_EPH_V01_M_V07_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2011_EPH_V01_M_V07_A_PIP_TB-ALL.dta&quot; #&gt; [27] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2012_EPH_V01_M_V04_A_PIP_TB-ALL.dta&quot; #&gt; [29] &quot;PRY_2013_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2013_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [31] &quot;PRY_2014_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2014_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [33] &quot;PRY_2015_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2015_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [35] &quot;PRY_2016_EPH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2016_EPH_V01_M_V02_A_PIP_TB-ALL.dta&quot; #&gt; [37] &quot;PRY_2017_EPH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2017_EPH_V01_M_V02_A_PIP_TB-ALL.dta&quot; #&gt; [39] &quot;PRY_2018_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2018_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [41] &quot;PRY_2019_EPH_V01_M_V01_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2019_EPH_V01_M_V01_A_PIP_TB-ALL.dta&quot; Yet, if the user need to be more precise in its request, she can add information to the different arguments of the function. For example, this is data available in 2012, pip_find_data(country = &quot;PRY&quot;, year = 2012)[[&quot;filename&quot;]] #&gt; [1] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_PC-GPWG.dta&quot; &quot;PRY_2012_EPH_V01_M_V04_A_PIP_TB-ALL.dta&quot; 2.2.3 Loading data Function pip_load_data takes care of loading the data. The very first instruction within pip_load_data is to find the data avialable in the repository by using pip_load_inventory(). The difference however is two-fold. First, pip_load_data will load the default and/or most recent version of the country/year combination available. Second, it gives the user the possibility to load different datasets in either list or dataframe form. For instance, if the user wants to load the Paraguay data in 2014 and 2015 used in the Poverty Calculator tool, she may type, df &lt;- pip_load_data(country = &quot;PRY&quot;, year = c(2014, 2015), tool = &quot;PC&quot;) #&gt; i Loading data and creating a dataframe v Loading data and creating a dataframe ... done janitor::tabyl(df, survey_id) #&gt; survey_id n percent #&gt; PRY_2014_EPH_V01_M_V03_A_PIP_PC-GPWG 20109 0.39548834 #&gt; PRY_2015_EPH_V01_M_V03_A_PIP_PC-GPWG 30737 0.60451166 "],["pcpipeline.html", "Chapter 3 Poverty Calculator Pipeline (pre-computed estimations) 3.1 Folder structure 3.2 Prerequisites 3.3 Structure of the _targets.R file 3.4 Understanding the pipeline 3.5 Understanding {pipdm} functions 3.6 Executing the _targets.R file 3.7 Debugging", " Chapter 3 Poverty Calculator Pipeline (pre-computed estimations) The Poverty Calculator Pipelinehereafter, pc pipelineis the technical procedure to calculate the pre-computed estimations of the PIP project. These estimations have two main purposes: Provide the user with instantaneous information about distributive measures of all the household surveys in the PIP repository that do not depend on the value of the poverty line, avoiding thus the need for re-computation as it was the case in PovcalNet for some of these measures. Provide the necessary inputs to the PIP API. This chapter walks you through the folder structure of the folder, the main R script, _targets.R, and the complete and partial execution of the script. Also, it provides some tips for debugging. 3.1 Folder structure The pc pipeline is hosted in the Github repository PIP-Technical-Team/pip_ingestion_pipeline. At the root of the repo you will find a series of files and folders. #&gt; +-- batch #&gt; +-- pip_ingestion_pipeline.Rproj #&gt; +-- R #&gt; +-- README.md #&gt; +-- renv #&gt; +-- renv.lock #&gt; +-- run.R #&gt; +-- _packages.R #&gt; \\-- _targets #&gt; \\-- _targets.R Folders R Contains long R functions used during the pipeline batch contains a script for timing the execution of the pipeline. This folder should probably be removed _targets contains a folder for all objects created during the pipeline. You dont need to look inside as its content is managed by the {targets} package. renv contains reproducible environment. Files _packages.R Created by targets::tar_renv(). Do not modify it manually. _targets.R Contains the pipeline. This is the most important file. 3.2 Prerequisites Before you start working on the pc pipeline, you need to make sure to have the following PIP packages. Note: Notice that directives below have suffixes like @development, which specify the branch of the particular package that you need to use. Ideally, the master branch of all packages should be used, but that will only happen until the end of the development process. remotes::install_github(&quot;PIP-Technical-Team/pipload&quot;) remotes::install_github(&quot;PIP-Technical-Team/wbpip@get_synth_vector&quot;) remotes::install_github(&quot;PIP-Technical-Team/pipdm&quot;) install.packages(&quot;joyn&quot;) In case renv is not working for you, you may need to install all the packages listed in the _packages.R script, located at the root of the folder. Also, make sure to install the most recent version of the {targets} and {tarchetypes} packages. 3.3 Structure of the _targets.R file Even thought the pc pipeline script looks like a regular R Script, it is structured in a specific way in order to make it work with the {targets} package, starting by the fact that it must be called _targets.R in the root of the project. It is highly recommended that you read the entire targets manual to fully understand how it works. Also, during this chapter, we will referring to the manual constantly to expand in any particular concept. Start up The first part of the pipeline sets up the environment. It, loads the {targets} and {tarchetypes} packages, creates default values like directories, time stamps, survey and reference years boundaries, compression level of .fst files, among other things. executes tar_option_set() to set up some options in {targets}. Two particular options are important, packages and imports for tracking changes in package dependencies. You can read more about it in sections Loading and configuring R packages and Packages-based invalidation of the targets manual. Attach all the packages and functions of the project by running source('_packages.R') and source('R/_common.R') Step 1: small functions According to the section Functions in pipelines of the targets manual, it is recommend to only use functions rather than expressions during the executions. Presumably, the reason is that {targets} track changes in functions but not in expressions. Thus, this section of the scripts defines small functions that are executed along the pc pipeline. In the section above, the line source('R/_common.R') loads longer functions. Yet, keep in mind that the 'R/_common.R' was used in a previous version of the pc pipeline before {targets} was implemented. Now, most of the function in 'R/_common.R' are included in the {pipdm} package. Step 2: prepare data This section used to be longer in previous versions of the pc pipeline because it identified the auxiliary data, loaded he PIP microdata inventory, and created the cache files. Now, it only identifies the auxiliary data and creates the data frame aux_tb, which is used inside the pc pipeline to create targets for each auxiliary file. Not much more to say here. 3.3.1 Step 3: The actual pipeline This part of the pc pipeline is long and it is explained in detail in the next section. Suffice is to say that the order of the pc pipeline is the following, Load all necessary data. That is, auxiliary data and inventories, and then create any cache fie that has not been created yet. Calculate means in LCU Create deflated survey mean (DSM) table Calculate reference year table (aka., interpolated means table) Calculate distributional stats Create output tables join survey mean table with dist table join reference year table with dist table coverage table aggregate population at the regional level table Clean and save. 3.4 Understanding the pipeline One thing is to understand how the {targets} package works and something else is to understand how the targets of the Poverty Calculator pc pipeline are created. For the former, you can read the targets manual. For the latter, we should start by making a distinction between the different types of targets. In {targets} terminology, there are two kinds of targets, stems and branches. Stems are unitary targets. That is, for each target there is only one single R object. Branches, on the other hand, are targets that contain several objects or subtargets inside (You can learn more about them in the chapter Dynamic branching of the targets manual). We will see the use of this type of targets when we talk about the use of cache files. Stem targets There are two ways to create stem targets: either using tar_target() or using tar_map() from the {tarchetypes} package. The tar_map() function allows to create stem targets iteratively. See for instance the creation of targets for each auxiliary data, tar_map( values = aux_tb, names = &quot;auxname&quot;, # create dynamic name tar_target( aux_dir, auxfiles, format = &quot;file&quot; ), tar_target( aux, pipload::pip_load_aux(file_to_load = aux_dir, apply_label = FALSE) ) ) tar_map() takes the values in the data frame aux_tb created in Step 2: prepare data and creates two type of targets. First, it creates the target aux_dir that contains the paths of the auxiliary files, which are available in the column auxfiles of aux_tb. This is done by creating an internal target within tar_map() and using the argument format = \"file\". This process lets {targets} know that we will have objects that are loaded from a file and are not created inside the pc pipeline. Then, tar_map() uses the the column auxname of aux_tb to name the targets that contain the auxiliary files. Each target will be prefixed by the word aux. This is why we had to add the argument file_to_load to pipload::pip_load_aux, so we can let {targets} know that the file paths defined in target aux_dir are used to create the targets prefixed with aux, which are the actual targets. For example, if I need to use the population data frame inside the pc pipeline, Id use the target aux_pop, which had a corresponding file path in aux_dir. In this way, if the original file referenced in aux_dir changes, all the targets that depend on aux_pop will be run again. Branches targets Lets think of a branch target like As explained above, branch targets are targets made of many subtargets that follow a particular pattern. the Most of the targets created in the pc pipeline are branch targets because we need to execute the same procedure in every cache file. This could have been done internally in one single, but then we would lose the tracking features of {targets}. Also, we could have created a stem target for every cache file, result, and output file, but that would have been not only impossible to visualize, but also more difficult to code. Thus branch targets is the best option. The following example illustrates how it works, # step A tar_target( cache_inventory_dir, cache_inventory_path(), format = &quot;file&quot; ), # step B tar_target( cache_inventory, { x &lt;- fst::read_fst(cache_inventory_dir, as.data.table = TRUE) }, ), # step C tar_target(cache_files, get_cache_files(cache_inventory)), # step D tar_files(cache_dir, cache_files), # step E tar_target(cache, fst::read_fst(path = cache_dir, as.data.table = TRUE), pattern = map(cache_dir), iteration = &quot;list&quot;) The code above illustrates several things. It is divided in steps, being the last step step Ethe part of the code in which we create the branch target. Yet, it is important to understand the steps before. In step A we create target cache_inventory_dir, which is merely the path of the file than contains the cache inventory. Notice that it is returned by a function and not entered directly into the target. Since it is a file path, we need to add the argument format = \"file\" to let {targets} know that it is input data. In step B we load the cache inventory file into target cache_inventory by providing the target path that we created in step A. This file has several column. One of them contains the file path of every single cache file in the PIP network drive. That single column is extracted from the cache inventory in step C. Now, in step D, each file path is declared as input, using the convenient function tar_files(), creating thus a new target, cache_dir. FInally, we create branch target cache with all the cache files by loading each file. To do this iteratively, we parse the cache_dir target to the path argument of the function fst::read_fst() and to the pattern = map() argument of the tar_target() function. Finally, we need to specify that the output of the iteration is stored as a list, using the argument iteration = \"list\". The basic logic of branch targets is that the vector or list to iterate through should be parsed to the argument of the function and to the pattern = map() argument of the tar_target() function. it is very similar to purrr::map() Note: If we are iterating through more than one vector or list, you need to (1) separate each of them by commas in the map() part of the argument (See example code below). (2) make sure all the vectors or lists have the same length. This is why we cannot remove NULL or NA values from any target. (3) make sure you do NOT sort any of the output targets as it will loose its correspondence with other targets. # Example of creating branch target using several lists to iterate through. tar_target( name = dl_dist_stats, command = db_compute_dist_stats(dt = cache, mean = dl_mean, pop = aux_pop, cache_id = cache_ids), pattern = map(cache, dl_mean, cache_ids), iteration = &quot;list&quot; ) Creating the cache files The creation of the cache files is done in the following code, tar_target(pipeline_inventory, { x &lt;- pipdm::db_filter_inventory( dt = pip_inventory, pfw_table = aux_pfw) # Uncomment for specific countries # x &lt;- x[country_code == &#39;IDN&#39; &amp; surveyid_year == 2015] } ), tar_target(status_cache_files_creation, pipdm::create_cache_file( pipeline_inventory = pipeline_inventory, pip_data_dir = PIP_DATA_DIR, tool = &quot;PC&quot;, cache_svy_dir = CACHE_SVY_DIR, compress = FST_COMP_LVL, force = TRUE, verbose = FALSE, cpi_dt = aux_cpi, ppp_dt = aux_ppp) ) It is important to understand this part of the pc pipeline thoroughly because the cache files used to be created in Step 2: prepare data rather than here. Now, it has not only been integrated in the pc pipeline, but it is also possible to execute the creation of cache files independently from the rest of the pipeline, by following the instructions in [Executing the _targets.R file]. The first target, pipeline_inventory is just the inner join of the pip inventory dataset and the price framework (pfw ) file to make sure we only include what the pfw says. This data set also contains a lot of information useful for creating the cache files. Notice that the commented line in this target would filter the pipeline inventory to have only the information for IDN, 2015. In case you need to update specific cache files, you have to do add the proper filtering condition in there. In the second target, status_cache_files_creation, you will create the cache files but notice that the returning value of the function pipdm::create_cache_file() is not the cache file per-se but a list with the status of the process of creation. If the creation of a particular file fails, it does not stop the iteration that creates the all cache files. At the end of the process, it returns a list with the creation status of each cache file. Notice that function pipdm::create_cache_file() requires the CPI and the PPP auxiliary data. This is so because the variable welfare_ppp, which is the welfare aggregate in 2011 PPP values, is added to the cache files. FInally, and more importantly, argument force = TRUE ensures that even if the cache file exists already, it should be modified. This is important when you require additional features in the cache file from the then ones it has now. If set to TRUE, it will replace any file in the network drive that is listed in pipeline_inventory. If set to FALSE, only the files that are in pipeline_inventory but not in the cache folder will be created. Use this option only when you need to add new features to all cache data or when you are testing and only need a few surveys with the new features. 3.5 Understanding {pipdm} functions The {pipdm} package is the backbone of the pc pipeline. It is in charge of executing the functions in {wbpip} and consolidate the new DataBases. This is why, many of the functions in {pipdm} are prefixed with db_. 3.5.1 Internal structure of {pipdm} functions The main objective of {pipdm} is to execute the functions in {wbpip} to do the calculations and then build the data frames. As of today, 2021-05-07, the process is a little intricate. Lets take the example of estimating distributive measures in the pipeline. The image below shows that there are at least three intermediate function levels between the db_compute_dist_stats() function, which executed directly in the pc pipeline, and the wbpip::md_compute_dist_stats(), which makes the calculations. Also, notice that the functions are very general in regards to the output. No higher level function is specific enough to retrieve only one measure such as the Gini coefficient, or the median, or the quantiles of the distribution. If you need to add or modify one particular distributive measure, you must do it in functions inside wbpip::md_compute_dist_stats(), making sure the new output does not mess up the execution of any of the intermediate functions before the results get to db_compute_dist_stats(). This long chain of functions is inflexible and makes debugging very difficult. So, if you need to make any modification, identify first the chain of execution in each pipdm function you modify and then make sure your changes do not affect the output format as it may break the chain of execution. Also, this is a good example to show why this structure needs to be improved. 3.5.2 Updating {pipdm} (or any other PIP package) As explained above, if you need to modify any function in pipdm or in wbpip you need to make sure that the output does not conflict with the chain of execution. Additionally, If you update any of the packages developed by the PIP team, make sure you always increased the version of the package using the function usethis::use_version(). Even if the change in the package is small, you need to increase the version of the package. Otherwise, {targets} wont execute the sections of the pipeline that run the functions you changed. Finally as explained in the Prerequisites, if you are working on a branch different than master, make sure you install that version of the package before running the pipeline. 3.6 Executing the _targets.R file The .Rprofile in the root of the directory makes sure that both {targets} and {tarchetypes} are loaded when the project is started. The execution of the whole pipeline might be very time consuming because it still needs to load all the data in the network drive. If you use a desktop remote connection the execution might be faster than running locally, but it is still very time consuming. So, my advise is that you only execute the targets that are directly affected by your changes and manually check that everything looks ok. After that, you can execute the whole thing confidently and leave it running overnight. In order to execute the whole pipeline, you only need to type the directive tar_make() in the console. If you want to execute only one target, then type the name of the target in the same directive, e.g., tar_make(dl_dist_stats). Keep in mind that if the inputs of prior targets to the objective target have changed, those targets will be executed first. 3.7 Debugging Debugging in targets is not easy. Yet, there are two ways to do it. The first way is provided in the chapter Debugging of the Targets Manual. It provides clear instruction on how to debug while still being in the pipeline, but it could be the case, as it happened to me, that you dont find this method flexible enough to dig deep enough into the problem. Alternatively, you could debug by stepping out of the pipeline a little bit and gain more flexibility. This is how I do it. You need to debug in one of two case. One, because you got an error when running the pipeline with tar_make() or, two, because your results are weird. In either case, you should probably have an ideathough not alwaysof where the problem is. If the problem is an error in the execution of the pipeline, {targets} printed messages are usually informative. Debugging stem targets Lets see a simple example. Assume the problem is in the target dt_dist_stats, which is created by executing the function db_create_dist_table of the {pipdm} package. Since the problem is in there, all the targets and inputs necessary to create dt_dist_stats should be available in the _targets/ data store. So, you can load them using tar_load() and execute the function in debugging mode. Like this, tar_load(dl_dist_stats) tar_load(svy_mean_ppp_table) tar_load(cache_inventory) debugonce(pipdm::db_create_dist_table) pipdm::db_create_dist_table( dl = dl_dist_stats, dsm_table = svy_mean_ppp_table, crr_inv = cache_inventory ) Notice that you need to use the :: because the environment in which {targets} runs is different from your Global environment in which you might not have attached all the libraries. Debugging branch targets The problem debugging branch targets is that if the problem is in a specific survey, you cant access the subtarget using the survey ID, or something like that, because the name of the subtarget is created by {targets} using a random number. This requires a little more of work. Imagine now that the distributive measures of IDN 2015 are wrong. You see the pipeline and notice that these calculation are executed in target dl_dist_stats, which is branch target created over all the cache files! It looks something like this, tar_target( name = dl_dist_stats, command = db_compute_dist_stats(dt = cache, mean = dl_mean, pop = aux_pop, cache_id = cache_ids), pattern = map(cache, dl_mean, cache_ids), iteration = &quot;list&quot; ) In order to find the problem in IDN 2015, this what you could do, # Load data dt &lt;- pipload::pip_load_cache(&quot;IDN&quot;, 2015, &quot;PC&quot;) tar_load(dl_mean) tar_load(cache_ids) tar_load(aux_pop) # Extract corresponding mean and cache ID idt &lt;- which(cache_ids == unique(dt$cache_id)) cache_id &lt;- cache_ids[idt] mean_i &lt;- dl_mean[[idt]] # Esecute the function of interest debugonce(pipdm:::compute_dist_stats) ds &lt;- pipdm::db_compute_dist_stats(dt = dt, mean = mean_i, pop = aux_pop, cache_id = cache_id) First, you load all the inputs. Since target dl_mean is a relatively light object, we load it directly from the _targets/ data store. Targets cache_ids and aux_pop are data frames, not lists, so we also load them from memory. The microdata, however, is problematic because target cache, which is the one that is parsed to create the actual dl_dist_stata target, is a huge list with all the micro, grouped, and imputed data. The solution is then to load the data frame of interest, using either pipload or fst. Secondly, we need to filter the list dl_mean and the data frame cache_ids to parse only the information accepted by pipdm::db_compute_dist_stats() function. This has to be done when debugging because in the actual target this is done iteratively in pattern = map(cache, dl_mean, cache_ids). Finally, you execute the function of interest. Notice something else. The target aux_pop is parsed as a single data frame because pipdm::db_compute_dist_stats() requires it that way. Note: This is also one of the reasons these functions in {pipdm} need some fixing and consistency in the format of the their inputs. "],["references.html", "References", " References "]]
