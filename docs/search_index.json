[["index.html", "PIP Manual Prerequisites", " PIP Manual DECIS Poverty GP 2021-06-14 Prerequisites You need to make sure the bookdown package is installed in your computer install.packages(&quot;bookdown&quot;) # or the development version devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction PIP workflow is  "],["internal-workflow.html", "Chapter 2 Internal Workflow 2.1 The Github group 2.2 Overview 2.3 Data acquisition", " Chapter 2 Internal Workflow This chapter explains the internal technical workflow of the PIP project. Many of the different steps of the workflow are explained in more detail in other chapters of this book. This chapter, however, presents an overview of the workflow and its components. 2.1 The Github group The technical code of the PIP project is organized in Git repositories in the Github group /PIP-Technical-Team. You need to be granted collaborator status in order to contribute to any of the repositories in the group. Also, many of the repositories do not play a direct role in the PIP technical workflow. Some of them are intended for documenting parts of the workflow or for testing purposes. For example, the repository of this book/PIPmanualis not part of the workflow of PIP, since it is not necessary for any estimation. Yet, you need get familiar with all the repositories in case you need to make a contribution in any of them. In this chapter, however, we will focus on understanding the repositories that affect directly the PIP workflow. First, we will see the overview of the workflow. It is an overview because each bucket of its buckets is a workflow in itself. Yet, it is important to have the overview clear in order to understand how and where all the pieces fall together. Then, we will unpack each of the workflow buckets to understand them in more detail. 2.2 Overview The workflow overview is mainly composed of four steps. Data acquisition Data preparation pre-calculated indicators API feeding Each of the steps (or buckets) is prerequisite of the next one, so if something changes in one of the them, it is necessary to execute the subsequent steps. 2.3 Data acquisition Before understanding how the input data of PIP is acquired, we need to understand PIP data itself. The PIP is fed by two kind of data: welfare data and auxiliary data. "],["welfare-data.html", "Chapter 3 Welfare data", " Chapter 3 Welfare data blah blah blah "],["auxiliary-data.html", "Chapter 4 Auxiliary data", " Chapter 4 Auxiliary data "],["primus.html", "Chapter 5 PRIMUS 5.1 Interacting with PRIMUS 5.2 Understanding PRIMUS 5.3 Checking PRIMUS estimates 5.4 Confirming and approving data in PRIMUS", " Chapter 5 PRIMUS According to the description in the Stata repository worldbank/primus, The PRIMUS system is designed to facilitate this process of generating internal estimates of the World Banks poverty indicators and reduce the time needed for resolving discrepancies. It is a workflow management platform for the submission, review and approval of poverty estimates and a tracking facility to capture the inputs and results of the estimation process for future reference and audits. As such, PRIMUS is the platform used by the PovcalNet team to approve the adoption of new survey data into the PovcalNet system. 5.1 Interacting with PRIMUS The interaction with PRIMUS is done through different systems, so it is best to begin by clarifying terms. Website platform PRIMUS can be accessed by typing primus/ in your browser. As long as youre connected to the intranet it should work fine. However, if you have any issues connecting to the platform, please send an email to Minh Cong Nguyen, requesting access. Each database uploaded into PRIMUS gets a unique transaction ID. This ID is important because it is not unique to a dataset but unique to the transaction (or vintage of the data). That is, if one particular dataset is uploaded more than once, it will get two different transaction IDs. When talking to the Poverty GP, you better refer to the transaction ID rather than the survey (or at least both) because, though you may be talking about the same country/year, you are actually talking about two different transactions. See for instance Brazil 2013. Stata command The Poverty GP maintains the Stata repository worldbank/primus from which you can download the command primus. Right now, this is the official place from which you can access this command. From now on, each time we refer to the command, we use primus, whereas when we refer to the website, we use PRIMUS. Please, make sure you have it properly installed in your computer, by following the instruction section ??. Basically, you need to install first the github Stata command by E. F. Haghish net install github, from(&quot;https://haghish.github.io/github/&quot;) Now, you can install primus by just typing the following in Stata github install worldbank/primus In case this does not work, follow instructions in section ?? for alternative methods. Corrections to primus Stata command The primus command is maintained by the Poverty GP, so we have no control over modifications or improvements. The best you can do in case you need to fix or modify something in this command is to fork the repository, clone the forked repo into your computer, check out a new branch, make any modification, and generate a pull request to the master branch of the original repository. Once you have done that, make sure to send an email with your suggestions for improvement to Ani Rudra Silwal, copying to the D4G Central Team (Nobuo Yoshida and Minh Cong Nguyen). 5.2 Understanding PRIMUS Each time a database is uploaded into PRIMUS, it is assigned a transaction ID. During the uploading process (or right after it has finished), the three partiesDECDG, DECRG, or the Poverty GPevaluate the quality of the new or corrected data and approve them or reject them in the system. Depending on the decision of all the parties, each transaction will take one of three possible status, pending, approved, or rejected. As of today (2020-11-20), there is no one who represents DECRG. So, the approving process might be different and it will need to be changed in the PRIMUS system. Please check. The transaction ID is pending when at least one of the three parties (DECDG, DECRG, or the Poverty GP) has not approved it in the system. You can click on the check box PENDING in the PRIMUS website to see which surveys have such a status, or you can use the primus command list this, qui primus query, overallstatus(PENDING) list transaction_id country year date_modified in 1/`=min(10, _N)&#39; +----------------------------------------------+ | transaction_id country year | |----------------------------------------------| 1. | TRN-000327173-EAP-IDN-QR48Q IDN 2017 | 2. | TRN-000327173-ECA-DEU-YJYVZ DEU 1995 | 3. | TRN-000327173-ECA-DEU-2P4DR DEU 2002 | 4. | TRN-000327173-ECA-DEU-LJN8R DEU 2003 | 5. | TRN-000327173-ECA-DEU-ZSN9J DEU 2005 | |----------------------------------------------| 6. | TRN-000327173-ECA-DEU-UBS7M DEU 2008 | 7. | TRN-000327173-ECA-DEU-41TOU DEU 2009 | 8. | TRN-000327173-EAP-AUS-KKZ2E AUS 2004 | +----------------------------------------------+ Notice that the overall status of a transaction is independent from survey ID. Thus, it is possible to find several transactions for the same country and year. Indonesia 2017, for instance, has three transactions, two of them rejected and one of them pending. qui primus query, country(IDN) year(2017) list transaction_id overall_status date_modified in 1/`=min(10, _N)&#39; +--------------------------------------------------+ | transaction_id date_modified | |--------------------------------------------------| 1. | TRN-000104674-EAP-IDN-8R9IF 23may2018 15:28:47 | 2. | TRN-000327173-EAP-IDN-TYA1A 23may2018 23:57:27 | 3. | TRN-000327173-EAP-IDN-QR48Q 24may2018 00:27:33 | +--------------------------------------------------+ A transaction is rejected when at least one of the three parties rejected the database. Finally, a transaction is approved only when all three parties have approved it into the system. We recommend you understand the basic functionality of the primus command by reading the help file (type help primus in Stata). 5.3 Checking PRIMUS estimates The real first step to check the quality of the recently uploaded data into PRIMUS is to download the basic estimates of each data and compare them with our own. There is no need to calculate and compare all the estimates available in PRIMUS but the mean in PPP, the poverty headcount, and the Gini index. The primus command allows us to download the estimates of each transaction, but it has to be done one by one. Fortunately, the pcn command downloads all the estimates of pending transactions for us and properly stores them in the folder p:\\01.PovcalNet\\03.QA\\02.PRIMUS\\pending\\   . You only need to type, pcn primus pending, down(estimates) In addition, pcn checks the date for which youre downloading the estimates and keeps only those transactions that have been uploaded for the next spring or annual-meetings release. For instance, assume that today, 2020-11-20, you want to see the estimates of pending transactions in PRIMUS. Since annual meetings take place around September, pcn assumes you are interested in the estimates for the Spring-meetings release, around March next year. Thus, it will filter the results from primus, keeping only those transactions that were uploaded from November 2020. Now it is likely that the PRIMUS system has not been opened for uploading new data in November, as it usually opens around December and July. Thus, it is likely that you will find and error saying There is no pending data in PRIMUS for the combination of country/years selected. You can load the recently-downloaded estimates by typing, pcn primus pending, load(estimates) Now, you have to check whether the new estimates make sense. Once way to that is to follow this do-file, p:\\01.PovcalNet\\03.QA\\02.PRIMUS\\pending\\2020_SM\\estimates\\checks\\comparisons_wrk_data.do. You do NOT need to check the estimates with the working data (wrk) as it is suggested in the do-file above. The PovcalNet System is now fully integrated with the datalibweb system, so the CPI, PPP, and microdata will be always the same. The best you can do at this stage is to make sure the estimates in PRIMUS make sense at the country level. 5.4 Confirming and approving data in PRIMUS Once you have checked that the estimates of pending transactions make sense, you need to approve them. As explained in section 5.2, the approval on PRIMUS requires the consent of three parties. The PovcalNet team had the responsibility to approve on behalf or two of them, DECDG and DECRG. This process can easily done with the code below, which can be found in this file, p:\\01.PovcalNet\\03.QA\\02.PRIMUS\\pending\\2020_SM\\approve\\primus_approve.do. /*================================================== 0: Program set up ==================================================*/ version 14 drop _all *---------- Modify this local excl = &quot;BRA SOM SSD&quot; // countries to exclude local excl = &quot;&quot; // countries to exclude /*================================================== Load data ==================================================*/ primus query, overalls(pending) //------------Cut off date local filtdate = &quot;2019-12-01&quot; // filter date (december last year) local filtdate = &quot;2020-02-18&quot; // filter date (surveys uploaded by Minh) keep if date_modified &gt;= clock(&quot;`filtdate&#39;&quot;, &quot;YMD&quot;) //------------Select username if (lower(&quot;`c(username)&#39;&quot;) == &quot;wb424681&quot;) { local dep = &quot;povcalnet&quot; } else if (lower(&quot;`c(username)&#39;&quot;) == &quot;wb384996&quot;) { local dep = &quot;decdg&quot; } else { noi disp in red &quot;you don&#39;t have rights to run this code&quot; break } tab `dep&#39; keep if `dep&#39; == &quot;PENDING&quot; if (&quot;`excl&#39;&quot; != &quot;&quot;) { local excl: subinstr local excl &quot; &quot; &quot;|&quot;, all drop if regexm(&quot;`country&#39;&quot;, &quot;`excl&#39;&quot;) } /*================================================= Approve (Do NOT modify) ==================================================*/ local n = _N preserve qui foreach i of numlist 1/`n&#39; { restore, preserve local country = country[`i&#39;] local year = year[`i&#39;] local id = transaction_id[`i&#39;] noi disp in y &quot;primus action, tranxid(`id&#39;) decision(approved)&quot; cap noi primus action, tranxid(`id&#39;) decision(approved) if (_rc) noi disp &quot;problem with `id&#39;&quot; } Basically, this is what you need to do with this file. Modify local excl in case you do not want to approve one or several countries. Modify local filtdate in which you select the date from which you want to approve transactions. Make sure at least two people approve. One on behalf of povcalnet (which is the alias used for DECRG) and another on behalf of decdg. PRIMUS has a double-confirmation process, so you need to confirm and then approve the transaction. For that, you only need to change the option decision() from approved to confirmed. For some unknown reason, the PRIMUS system did not accept the approval of some transactions. If this happens again, you need to talk to Minh Cong Nguyen, so he can do the approval manually. "],["load.html", "Chapter 6 Load microdata and Auxiliary data 6.1 Auxiilary data 6.2 Microdata", " Chapter 6 Load microdata and Auxiliary data Make sure you have all the packages installed and loaded into memory. Given that they are hosted in Github, the code below makes sure that any package in the PIP workflow can be installed correctly. ## First specify the packages of interest packages = c(&quot;pipaux&quot;, &quot;pipload&quot;) ## Now load or install&amp;load all package.check &lt;- lapply( packages, FUN = function(x) { if (!require(x, character.only = TRUE)) { pck_name &lt;- paste0(&quot;PIP-Technical-Team/&quot;, x) devtools::install_github(pck_name) library(x, character.only = TRUE) } } ) 6.1 Auxiilary data Even though pipaux has more than 25 functions, most of its features can be executed by using only the pipaux::load_aux and pipaux::update_aux functions. 6.1.1 udpate data the main function of the pipaux package is udpate_aux. The first argument of this function is measure and it refers to the measure data to be loaded. The measures available are cpi, gdm, gdp, pce, pfw, pop, and ppp. pipaux::update_aux(measure = &quot;cpi&quot;) #&gt; no labels available for measure `country_list` #&gt; v CPI data is up to date 6.1.2 Load data Loading auxiliary data is the job of the package pipload through the function pipload::pip_load_aux(), though pipaux also provides pipaux::load_aux() for the same purpose. Notice that, though both function do exactly the same, the loading function from pipload has the prefix pip_ to distinguish it from the one in pipaux. However, we are going to limit the work of pipaux to update auxiliary data and the work of pipload to load data. Thus, all the examples below use pipload for loading either microdata or auxiliary data. df &lt;- pipload::pip_load_aux(measure = &quot;cpi&quot;) #&gt; v Most recent version of data loaded #&gt; //w1wbgencifs01/pip/PIP-Data_QA/_aux/cpi/cpi.fst head(df) #&gt; country_code cpi_year survey_year #&gt; 1: AGO 2000 2000.21 #&gt; 2: AGO 2008 2008.50 #&gt; 3: AGO 2018 2018.17 #&gt; 4: ALB 1996 1996.00 #&gt; 5: ALB 2002 2002.00 #&gt; 6: ALB 2005 2005.00 #&gt; cpi ccf survey_acronym #&gt; 1: 0.03385145 1 HBS #&gt; 2: 0.72328920 1 IBEP-MICS #&gt; 3: 2.93543023 1 IDREA #&gt; 4: 0.44446184 1 EWS #&gt; 5: 0.78033877 1 LSMS #&gt; 6: 0.83852839 1 LSMS #&gt; change_cpi2011 cpi2011 cpi_domain #&gt; 1: 0 0.03385145 1 #&gt; 2: 1 0.72328920 1 #&gt; 3: 1 2.93543023 1 #&gt; 4: 1 0.44446184 1 #&gt; 5: 1 0.78033877 1 #&gt; 6: 1 0.83852839 1 #&gt; cpi_domain_value cpi2011_unadj #&gt; 1: 1 0.03385145 #&gt; 2: 1 0.72328920 #&gt; 3: 1 2.93543023 #&gt; 4: 1 0.44446184 #&gt; 5: 1 0.78033877 #&gt; 6: 1 0.83852839 #&gt; cpi2011_AM20 cpi2011_unadj_AM20 #&gt; 1: 0.033848061 0.033848061 #&gt; 2: 0.723337197 0.723337197 #&gt; 3: 3.060594983 3.060594983 #&gt; 4: 0.444432734 0.444432734 #&gt; 5: 0.780287716 0.780287716 #&gt; 6: 0.838473458 0.838473458 #&gt; cpi2005_AM20 cpi_final_2019 #&gt; 1: 0.071889997 NA #&gt; 2: 1.528669953 NA #&gt; 3: NA NA #&gt; 4: 0.530049980 NA #&gt; 5: 0.950504005 NA #&gt; 6: 1.000000000 NA #&gt; cpi_data_level cpi_id #&gt; 1: national CPI_v05_M_v01_A #&gt; 2: national CPI_v05_M_v01_A #&gt; 3: national CPI_v05_M_v01_A #&gt; 4: national CPI_v05_M_v01_A #&gt; 5: national CPI_v05_M_v01_A #&gt; 6: national CPI_v05_M_v01_A 6.2 Microdata Loading PIP microdata is the most practical action in the pipload package. However, it is important to understand the logic of microdata. PIP microdata has several characteristics, There could be more than once survey for each Country/Year. This happens when there are more than one welfare variable available such as income and consumption. Some countries, like Mexico, have the two different welfare types in the same survey for the same country/year. This add a layer of complexity when the objective is to known which is default one. There are multiple version of the same harmonized survey. These version are organized in a two-type vintage control. It is possible to have a new version of the data because the Raw datathe one provided by the official NSOhas been updated, or because there has been un update in the harmonization process. Each survey could be use for more than one analytic tool in PIP (e.g., Poverty Calculator, Table Maker, or SOL). Thus, the data to be loaded depends on the tool in which it is going to be used. Thus, in order to make the process of finding and loading data efficiently, pipload is a three-step process. 6.2.1 Inventory file The inventory file resides in y:/PIP-Data/_inventory/inventory.fst. This file is a data frame with all the microdata available in the PIP structure. It has two main variables, orig and filename. The former refers to the full directory path of the database, whereas the latter is only the file name. the other variables in this data frame are derived from these two. The inventory file is used to speed up the file searching process in pipload. In previous packages, each time the user wanted to find a particular data base, it was necessary to look into the folder structure and extract the name of all the file that meet a particular criteria. This is time-consuming and inefficient. The advantage of this method though, is that, by construction, it finds all the the data available. By contrast, the inventory file method is much faster than the searching method, as it only requires to load a light file with all the data available, filter the data, and return the required information. The drawback, however, is that it needs to be kept up to date as data changes constantly. To update the inventory file, you need to use the function pip_update_inventory. If you dont provide any argument, it will update the whole inventory, which may take around 10 to 15 minthe function will warn you about it. By provide the country/ies you want to update, the process is way faster. # update one country pip_update_inventory(&quot;MEX&quot;) #&gt; i file inventory.fst is up to date. #&gt; No update performed # Load inventory file df &lt;- pip_load_inventory() head(df[, &quot;filename&quot;]) #&gt; filename #&gt; 1: AGO_2000_HBS_V01_M_V01_A_PIP_PC-GPWG.dta #&gt; 2: AGO_2008_IBEP-MICS_V02_M_V02_A_PIP_PC-GPWG.dta #&gt; 3: AGO_2008_IBEP-MICS_V02_M_V02_A_PIP_TB-ALL.dta #&gt; 4: AGO_2018_IDREA_V01_M_V01_A_PIP_PC-GPWG.dta #&gt; 5: AGO_2018_IDREA_V01_M_V01_A_PIP_TB-ALL.dta #&gt; 6: ALB_1996_EWS_V01_M_V01_A_PIP_PC-HIST.dta 6.2.2 Finding data Every dataset in the PIP microdata repository is identified by seven variables! Country code, survey year, survey acronym, master version, alternative version, tool, and source. So giving the user the responsibility to know all the different combinations of each file is a heavy burden. Thus, the data finder, pip_find_data(), will provide the names of all the files available that meet the criteria in the arguments provided by the user. For instance, if the use wants to know the all the file available for Paraguay, we could type, pip_find_data(country = &quot;PRY&quot;)[[&quot;filename&quot;]] #&gt; [1] &quot;PRY_1990_EH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; #&gt; [2] &quot;PRY_1995_EH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; #&gt; [3] &quot;PRY_1997_EIH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [4] &quot;PRY_1999_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [5] &quot;PRY_2001_EIH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [6] &quot;PRY_2001_EIH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [7] &quot;PRY_2002_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [8] &quot;PRY_2002_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [9] &quot;PRY_2003_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [10] &quot;PRY_2003_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [11] &quot;PRY_2004_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [12] &quot;PRY_2004_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [13] &quot;PRY_2005_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [14] &quot;PRY_2005_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [15] &quot;PRY_2006_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [16] &quot;PRY_2006_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [17] &quot;PRY_2007_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [18] &quot;PRY_2007_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [19] &quot;PRY_2008_EPH_V01_M_V05_A_PIP_PC-GPWG.dta&quot; #&gt; [20] &quot;PRY_2008_EPH_V01_M_V05_A_PIP_TB-ALL.dta&quot; #&gt; [21] &quot;PRY_2009_EPH_V01_M_V06_A_PIP_PC-GPWG.dta&quot; #&gt; [22] &quot;PRY_2009_EPH_V01_M_V06_A_PIP_TB-ALL.dta&quot; #&gt; [23] &quot;PRY_2010_EPH_V01_M_V06_A_PIP_PC-GPWG.dta&quot; #&gt; [24] &quot;PRY_2010_EPH_V01_M_V06_A_PIP_TB-ALL.dta&quot; #&gt; [25] &quot;PRY_2011_EPH_V01_M_V07_A_PIP_PC-GPWG.dta&quot; #&gt; [26] &quot;PRY_2011_EPH_V01_M_V07_A_PIP_TB-ALL.dta&quot; #&gt; [27] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_PC-GPWG.dta&quot; #&gt; [28] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_TB-ALL.dta&quot; #&gt; [29] &quot;PRY_2013_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [30] &quot;PRY_2013_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [31] &quot;PRY_2014_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [32] &quot;PRY_2014_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [33] &quot;PRY_2015_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [34] &quot;PRY_2015_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [35] &quot;PRY_2016_EPH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; #&gt; [36] &quot;PRY_2016_EPH_V01_M_V02_A_PIP_TB-ALL.dta&quot; #&gt; [37] &quot;PRY_2017_EPH_V01_M_V02_A_PIP_PC-GPWG.dta&quot; #&gt; [38] &quot;PRY_2017_EPH_V01_M_V02_A_PIP_TB-ALL.dta&quot; #&gt; [39] &quot;PRY_2018_EPH_V01_M_V03_A_PIP_PC-GPWG.dta&quot; #&gt; [40] &quot;PRY_2018_EPH_V01_M_V03_A_PIP_TB-ALL.dta&quot; #&gt; [41] &quot;PRY_2019_EPH_V01_M_V01_A_PIP_PC-GPWG.dta&quot; #&gt; [42] &quot;PRY_2019_EPH_V01_M_V01_A_PIP_TB-ALL.dta&quot; Yet, if the user need to be more precise in its request, she can add information to the different arguments of the function. For example, this is data available in 2012, pip_find_data(country = &quot;PRY&quot;, year = 2012)[[&quot;filename&quot;]] #&gt; [1] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_PC-GPWG.dta&quot; #&gt; [2] &quot;PRY_2012_EPH_V01_M_V04_A_PIP_TB-ALL.dta&quot; 6.2.3 Loading data Function pip_load_data takes care of loading the data. The very first instruction within pip_load_data is to find the data avialable in the repository by using pip_load_inventory(). The difference however is two-fold. First, pip_load_data will load the default and/or most recent version of the country/year combination available. Second, it gives the user the possibility to load different datasets in either list or dataframe form. For instance, if the user wants to load the Paraguay data in 2014 and 2015 used in the Poverty Calculator tool, she may type, df &lt;- pip_load_data(country = &quot;PRY&quot;, year = c(2014, 2015), tool = &quot;PC&quot;) #&gt; i Loading data and creating a dataframe v Loading data and creating a dataframe ..... janitor::tabyl(df, survey_id) #&gt; survey_id n #&gt; PRY_2014_EPH_V01_M_V03_A_PIP_PC-GPWG 20109 #&gt; PRY_2015_EPH_V01_M_V03_A_PIP_PC-GPWG 30737 #&gt; percent #&gt; 0.39548834 #&gt; 0.60451166 "],["pcpipeline.html", "Chapter 7 Poverty Calculator Pipeline (pre-computed estimations) 7.1 Folder structure 7.2 Prerequisites 7.3 Structure of the _targets.R file 7.4 Understanding the pipeline 7.5 Executing the _targets.R file 7.6 Debugging", " Chapter 7 Poverty Calculator Pipeline (pre-computed estimations) The Poverty Calculator Pipelinehereafter, and only for the rest of this chapter, pipelineis the technical procedure to calculate the pre-computed estimations of the PIP project. These estimations have two main purposes: Provide the user with instantaneous information about distributive measures of all the household surveys in the PIP repository that do not depend on the value of the poverty line. Avoiding thus the need for re-computation as it was the case in PovcalNet for some of these measures. Provide the necessary inputs to the PIP API. This chapter walks you through the folder structure of the folder, the main R script, _targets.R, and the complete and partial execution of the script. Also, it provides some tips for debugging. 7.1 Folder structure The pipeline is hosted in the Github repository PIP-Technical-Team/pip_ingestion_pipeline. At the root of the repo you will find a series of files and folders. #&gt; +-- batch #&gt; +-- pip_ingestion_pipeline.Rproj #&gt; +-- R #&gt; +-- README.md #&gt; +-- renv #&gt; +-- renv.lock #&gt; +-- run.R #&gt; +-- _packages.R #&gt; \\-- _targets #&gt; \\-- _targets.R Folders R Contains long R functions used during the pipeline batch Script for timing the execution of the pipeline. This folder should probably be removed _targets Folder for all objects created during the pipeline. You dont need to look inside as it content is managed by the targets package. renv Folder for reproducible environment. Files _packages.R Created by targets::tar_renv(). Do not modify manually. _targets.R Contains the pipeline. This is the most important file. 7.2 Prerequisites Before you start working on the pipeline, you need to make sure to have the following PIP packages. Note: Notice that directives below have suffixes like @development, which specify the branch of the particular package that you need to use. Ideally, the master branch of all packages should be used, but that will only happen until the end of the development process. Note2: If you update any of the packages developed by the PIP team, make sure you always increased the version of the package using the function usethis::use_version(). Even if the change in the package is small, you need on increased the version of the package. Otherwise, {targets} wont execute the sections of the pipeline that run the functions you changed. remotes::install_github(&quot;PIP-Technical-Team/pipdm@development&quot;) remotes::install_github(&quot;PIP-Technical-Team/pipload@development&quot;) remotes::install_github(&quot;PIP-Technical-Team/wbpip@halfmedian_spl&quot;) install.packages(&quot;joyn&quot;) In case renv is not working for you, you may need to install all the packages mentioned in the _packages.R script at the root of the folder. Also, make sure to install the most recent version of targets and tarchetypes packages. 7.3 Structure of the _targets.R file Even thought the pipeline script looks like a regular R Script, it is structured in a specific way in order to make it work with {[targets](https://docs.ropensci.org/targets/)} package, starting by the fact that it must be called _targets.R in the root of the project. It highly recommended you read the entire targets manual to fully understand how it works. Also, during this chapter, we will referring to the manual constantly to expand in any particular targets concept. Start up The first part of the pipeline sets up the environment. It, loads the {targets} and {tarchetypes} packages, creates default values like directories, time stamps, survey and reference years boundaries, compression level of .fst files, among other things. executes tar_option_set() to set up some option in {targets}. Two particular options are important, packages and imports for tracking changes in package dependencies. You can read more about it in sections Loading and configuring R packages and Packages-based invalidation of the targets manual. Attach all the packages and functions of the project by running source('_packages.R') and source('R/_common.R') Step 1: small functions According to the section Functions in pipelines of the targets manual, it is recommend to only use functions rather than expressions during the executions. Presumably, the reason for this is that targets track changes in functions but not in expressions. Thus, this section of the scripts defines small functions that are executed along the pipeline. In the section above, the scripts source('R/_common.R') loads longer functions. Yet, keep in mind that the 'R/_common.R' was used in a previous version of the pipeline before {targets} was implemented. Now, most of the function in 'R/_common.R' are included in the {pipdm} package. Step 2: prepare data This section used to longer in previous versions of the pipeline because identified the auxiliary data, loaded he PIP microdata inventory, and created the cache files. Now, it only identifies the auxiliary data. Not much to be said here. 7.3.1 Step 3: The actual pipeline This part of the pipeline is long and it is explained in detail in the next section. Suffice is to say that the order of the pipeline is the following, Load all necessary data. That is, auxiliary data and inventories, and then create any cache fie that has not been created yet. Calculate means in LCU Crate deflated survey mean (DSM) table Calculate reference year table (aka., interpolated means table) Calculate distributional stats Create output tables join survey mean table with dist table join reference year table with dist table coverage table aggregate population at the regional level table Clean and save. 7.4 Understanding the pipeline One thing is to understand the how the {targets} package works and something else is to understand how the targets of the Poverty Calculator Pipeline are created. For the former, you can read the targets manual. For the latter, we should start by making a distinction between the different types of targets. In {targets} terminology, there are two kinds of targets, stems and branches. Stems are unitary targets. That is, for each target there is only one single R object. Branches, on the other hand, are targets that contain several objects or subtargets inside (You can learn more about them in the chapter Dynamic branching of the targets manual). We will see the use of this type of targets when we talk about the use of cache files. There are two ways to create stem targets: either using tar_target() or using tar_map() from the {tarchetypes} package. The tar_map() function allows to create stem targets iteratively. 7.5 Executing the _targets.R file awfawef 7.6 Debugging sdfsdf "],["references.html", "References", " References "]]
