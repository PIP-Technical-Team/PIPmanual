[["azure.html", "Chapter 9 Deploying to Azure 9.1 Poverty Calculator Data 9.2 Poverty Calculator Docker image", " Chapter 9 Deploying to Azure The Azure DevOps site for PIP currently consists of two repos; ITSES-POVERTYSCORE and ITSES-POVERTYSCORE-DATA. Each repo consists of three branches; DEV, QA and PROD. The PIP Techincal Team will handle deployments to DEV and QA, while ITS need to approve deployments to Production. 9.1 Poverty Calculator Data Before you start with the data deployment process you will need to clone the Azure DevOps Data repo (DEV branch) to your local machine. You will only need to do this once. After that you can follow the step by step guide below. Note: In the (near) future the Azure Data repo will be directly synced with pipeline outputs folder on the PIP network drive. There will then be no need to clone the repo to your local computer. 9.1.1 Deploying data on DEV Step 1: Sync you local DEV branch with the remote. Commit and push any data changes to the remote. Step 2: Nagivate to the Azure DevOps Data repo. Click on Pipelines. Step 3: Select the FILE-COPY-DEV-CI pipeline. Step 4: Click on Run pipeline. Step 5: Click on Variables -&gt; FolderName, and add the name of the folder which should be copied to the Cloud Blob Store. Note: This step is likely to change when the Data pipeline is re-written to handle mulitiple data version folders. Step 6: Click on Run. Step 7: View the new build. Step 8: Click on Releases and select the FILE-COPY-DEV-CD release. Approve the pending request. Step 9: Verify that the build completed. Step 10: Wait for the data on the VM to be updated. There is an automatic cron job that runs behind the scenes to copy the data from the blob storage to the VM. This runs at regular intervals, every 10 (?) minutes. 9.1.2 Deploying data on QA Step 1: Nagivate to the Azure DevOps Data repo. Step 2: Click on Create pull request. Select from DEV to QA. Step 3: Go through the steps to commit and approve the pull request. Please make sure that the Delete source branch box is unchecked, ie. dont delete the DEV branch. Step 5: Go to Pipelines -&gt; Piplines and select the FILE-COPY-QA-CI pipeline. Verify that the pipeline is building. If it wasnt triggered you will need to trigger it manually. Step 6: Go to Pipelines -&gt; Releases and select the FILE-COPY-QA-CD release. Approve the request, and verify that the build completes. 9.1.3 Deploying data to Production Step 1: Nagivate to the Azure DevOps Data repo. Step 2: Click on Create pull request. Select from QA to PROD. Step 3: Go through the steps to commit and approve the pull request. Please make sure that the Delete source branch box is unchecked, ie. dont delete the QA branch. Step 5: Go to Pipelines -&gt; Piplines and select the FILE-COPY-PROD-CI pipeline. Verify that the pipeline is building. If it wasnt triggered you will need to trigger it manually. Step 6: Go to Pipelines -&gt; Releases and select the FILE-COPY-QA-CD release. Wait for ITS to approve the request, and then verify that the build completes. 9.2 Poverty Calculator Docker image Before you start with the application deployment process you will need to clone the Azure DevOps Docker repo (DEV branch) to your local machine. You will only need to this once. After that you can follow the step by step guide below. Please note that it is important that data changes are pushed through and released before deploying the Docker image. This is because the Docker container will need to restart in order to pick up changes in the mounted folder or volume. The best way to do this is to deploy the data, and then use the API restart pipeline to ensure a restart of the Docker container. 9.2.1 Deploying image on DEV Step 1: Verify that the latest code in the master branches of {wbpip} and {pipapi} works with the latest data on DEV. This can be done by running the {pipapi} pacakge in a local RStudio session. Step 2: [Optional] Verify that the most recent Dockerfile builds on your local machine. This is certainly something that should be done if the contents of the Dockerfile has changed, or before major releases. But in a continous workflow where you know that Dockerfile hasnt changed, it migth be sufficent to verify that the R packages in question are working. Step 3: Navigate to the Azure DevOps Docker repo. Go Pipelines -&gt; Pipelines. Trigger the CONTAINER-DEV-CI pipeline, either by a) Pushing an updated Dockerfile to the remote repo or b) Running the Pipeline manually. Step 4: Go to the Pipelines -&gt; Releases and select Create release in order to run a new deployment. View the logs to see results from the image build and security scan. Step 5:. Vist the DEV API website for further testing. 9.2.2 Deploying image on QA Step 1: Check that the DEV deployment is working correctly. Step 2: Make sure the data on QA is up-to-date (in sync with DEV). If it isnt you will need to create a PR and merge the data first. Step 3: Create a pull request from DEV to QA. Go through the steps to commit and approve the pull request. Please make sure that the Delete source branch box is unchecked, ie. dont delete the DEV branch. Step 4: Go to the Release pipline to see results from the image build and security scan. Step 5: Visit the QA API website for further testing. 9.2.3 Deploying image to Production Step 1: Check that the QA deployment is working correctly. Step 2: Make sure the data on PROD is up-to-date (in sync with QA). If it isnt you will need to create a PR and merge the data first. Step 3: Create a pull request from QA to PRDO. Go through the steps to commit and approve the pull request. Please make sure that the Delete source branch box is unchecked, ie. dont delete the QA branch. Step 4: Go to the Release pipline to see results from the image build and security scan. Step 5: Visit the PROD API website for further testing. "]]
